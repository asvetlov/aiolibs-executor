name: CI

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  schedule:
  - cron: 0 4 * * *

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Checkout commit
      uses: actions/checkout@v4
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    - name: Install pipx
      run: python3 -m pip install --user pipx && python3 -m pipx ensurepath
    - name: Install Poetry with pipx
      run: |
        pipx install poetry pre-commit
    - name: Setup Python dependencies cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-
    - name: Install dependencies
      run: make install
    - name: Lint
      run: |
        echo "::add-matcher::.github/actionlint-matcher.json"
        make lint

  test:
    name: Run tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        pyver: ['3.11', '3.12', '3.13']
    steps:
    - name: Checkout commit
      uses: actions/checkout@v4
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.pyver }}
    - name: Install pipx
      run: python3 -m pip install --user pipx && python3 -m pipx ensurepath
    - name: Install Poetry with pipx
      run: |
        pipx install poetry pre-commit
    - name: Setup Python dependencies cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          poetry-
    - name: Setup pre-commit dependencies cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          pre-commit-
    - name: Install dependencies
      run: make install
    - name: Run unit tests
      run: make test
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: .coverage.xml
        slug: aio-libs/aiolibs-executor

  check:
    name: Check
    needs:
    - lint
    - test
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}

  approve:
    name: Approve bot PR
    runs-on: ubuntu-latest
    if: endsWith(github.actor, '[bot]')
    needs: check
    permissions:
      contents: write
      pull-requests: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: metadata
      id: metadata
      if: github.actor == 'dependabot[bot]'
      uses: dependabot/fetch-metadata@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Enable auto-merge for bot PRs
      run: gh pr merge --auto --squash --delete-branch "$PR_URL"
      env:
        PR_URL: ${{ github.event.pull_request.html_url }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
